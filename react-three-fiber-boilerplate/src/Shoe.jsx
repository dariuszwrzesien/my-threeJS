/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/models/shoe-draco.glb 
*/

import React, { useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { Color } from 'three'
import { useControls } from 'leva'

export function Model(props) {
  const { nodes, materials } = useGLTF('./models/shoe-draco.glb')
  const [hovered, setHovered] = React.useState(false)

  useEffect(() => {
    document.body.style.cursor = hovered ? 'pointer' : 'auto'
  }, [hovered])

  useControls('Shoe', () => {
    const colorPickers = {}
    Object.keys(materials).forEach((key) => {
      colorPickers[key] = {
        value:
          '#' +
          Math.floor(Math.random() * 16777215)
            .toString(16)
            .padStart(6, '0'), //random color
        onChange: (value) => {
          materials[key].color = new Color(value)
        }
      }
    })
    return colorPickers
  })

  return (
    <group
      {...props}
      dispose={null}
      onPointerOver={(e) => setHovered(true)}
      onPointerOut={(e) => setHovered(false)}
      onClick={(e) => {
        e.stopPropagation()
        document.getElementById('Shoe.' + e.object.material.name).focus()
      }}>
      <mesh geometry={nodes.shoe.geometry} material={materials.laces} />
      <mesh geometry={nodes.shoe_1.geometry} material={materials.mesh} />
      <mesh geometry={nodes.shoe_2.geometry} material={materials.caps} />
      <mesh geometry={nodes.shoe_3.geometry} material={materials.inner} />
      <mesh geometry={nodes.shoe_4.geometry} material={materials.sole} />
      <mesh geometry={nodes.shoe_5.geometry} material={materials.stripes} />
      <mesh geometry={nodes.shoe_6.geometry} material={materials.band} />
      <mesh geometry={nodes.shoe_7.geometry} material={materials.patch} />
    </group>
  )
}

useGLTF.preload('./models/shoe-draco.glb')
